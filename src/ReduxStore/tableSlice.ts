import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit'
import type { RootState } from './store'
import { MAKE_REQ } from './actionTypes'
import { getDataPage } from "../Components/DataTable/apiService";


interface TableRecord {
  id: string;
  employeeSignatureName: string;
  employeeSigDate: string;
  employeeNumber: string;
  documentType: string;
  documentStatus: string;
  documentName: string;
  companySignatureName: string;
  companySigDate: string;
}

export interface TableState {
  items: Array<TableRecord>;
  isFetching: boolean;
  error: string | null;
}

const initialState: TableState = {
  items: [],
  isFetching: false,
  error: null,
}

// Async thunk for fetching all items
export const getAllItemsAsync = createAsyncThunk(
  'table/fetchAllItems',
  async (_, { rejectWithValue }) => {
    try {
      const response = await getDataPage();
      return response.data;
    } catch (error: any) {
      // console.error("CATCH====> ", error);
      return rejectWithValue(error.message || 'Failed to fetch data');
    }
  }
);

const tableSlice = createSlice({
  name: 'table',
  initialState,
  reducers: {
    makeRequest(state) {
      state.isFetching = true;
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(getAllItemsAsync.pending, (state) => {
        state.isFetching = true;
        state.error = null;
      })
      .addCase(getAllItemsAsync.fulfilled, (state, action: PayloadAction<TableRecord[]>) => {
        state.items = action.payload;
        state.isFetching = false;
        state.error = null;
      })
      .addCase(getAllItemsAsync.rejected, (state, action) => {
        state.isFetching = false;
        state.error = action.payload as string;
      });
  },
});

// Export the action creators generated by createSlice
export const { makeRequest } = tableSlice.actions;

// Export the reducer to be used in the store configuration
export default tableSlice.reducer;

// Selector to get the table items from the state
export const selectTableItems = (state: RootState) => state.table.items;
export const selectIsFetching = (state: RootState) => state.table.isFetching;
export const selectError = (state: RootState) => state.table.error;